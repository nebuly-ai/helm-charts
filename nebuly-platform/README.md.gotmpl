# Nebuly Platform

{{ template "chart.deprecationWarning" . }}

{{ template "chart.badgesSection" . }}

{{ template "chart.description" . }}

{{ template "chart.homepageLine" . }}

{{ template "chart.requirementsSection" . }}


## Prerequisites

### Databases

The platform requires a PostgreSQL Server configured with the databases listed in the table below.
The databases can be created with arbitrary names, as the name of each database
can be provided as a configuration parameter during the installation process of the platform.

| Database        | Helm Value                        | Collation  | Charset | Description                                                                          |
|-----------------|-----------------------------------|------------|---------|--------------------------------------------------------------------------------------|
| Backend         | `backend.postgresDatabase`        | en_US.utf8 | utf8    | It stores users information such as settings, dashboards and projects.               |
| Tenant Registry | `authService.postgresDatabase` | en_US.utf8 | utf8    | It stores internal information necessary for the proper functioning of the platform. |
| Analytic        | `analyticDatabase.name`           | en_US.utf8 | utf8    | It stores analytic data such as user LLM interactions                                |

The PostgreSQL server must meet the following requirements:

* The minimum supported version of PostgreSQL is 14.0.
* The server must support password authentication
* [TimescaleDB](https://github.com/timescale/timescaledb) extension must be installed on the server
* The minimum supported version of TimescaleDB is 2.5.0

### Apache Kafka

The Platform requires an [Apache Kafka](https://kafka.apache.org/) server for storing the
ingested events waiting to be processed.

At moment, the Platform only supports
[SASL/PLAIN](https://docs.confluent.io/platform/current/kafka/authentication_sasl/authentication_sasl_plain.html#kafka-sasl-auth-plain)
authentication with username and password, so the Kafka server must be configured to use this authentication method.

The Platform uses several topics in the Kafka server. You can customize the names of the topics through the following
values:

* `kafka.topicEventsMain`
* `kafka.topicEventsRetry1`
* `kafka.topicEventsRetry2`
* `kafka.topicEventsRetry3`
* `kafka.topicEventsDlq`

If the topics do not exist, the Platform creates them automatically at startup. It is recommended to create the topics
manually with the desired configuration before installing the Platform, so that its possible to
configure each topic with the desired number of partitions and replication factor according to the expected load.

## Installation

### 1. Create a GitHub personal access token

You first need to create a GitHub personal access token with the `read:packages` scope to pull the required Docker
images. You can refer to
the [GitHub documentation](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/managing-your-personal-access-tokens).

### 2. Create a container image pull secret

You need to create a container image pull secret with the PAT token you created in the previous step. You can
do that following the steps below.

1. Create a base64 encoded string of the token value with the following command, where `<username>` is your GitHub
username and `<token>` is the value of the PAT token you created in the previous step.

```bash
echo -n "<username>:<token>" | base64
```

2. Create a JSON file containing the base64 representation of your PAT. You can do that with the following commands,
   replacing the placeholder `<your-base64-token>` with the value you obtained in the previous step:

```bash
cat <<EOT > secret.json
{
  "auths": {
    "ghcr.io": {
      "auth": "<your-base64-token>"
    }
  }
}
EOT
```

3. Create the image pull secret
```bash
kubectl create secret docker-registry nebuly-docker-pull --from-file=.dockerconfigjson=secret.json --namespace nebuly
```


### 3. Install the chart
You can install the chart in the namespace `nebuly` with the following command:

```bash
helm install oci://ghcr.io/nebuly-ai/helm-charts/nebuly-platform \
  --version 0.1.0 \
  --namespace nebuly \
  --generate-name \
  --create-namespace \
  -f values.yaml
```

Below you can find a minimal `values.yaml` file with all the mandatory configuration settings:

```yaml
imagePullSecrets:
  - name: nebuly-docker-pull

authService:
  postgresServer: mydatabaseserver.postgres.database.azure.com
  postgresUser: myusername
  postgresPassword: mypassword

kafka:
  bootstrapServers: serverurl
  saslUsername: username
  saslPassword: password

analyticDatabase:
  server: mydatabaseserver.postgres.database.azure.com
  user: username
  password: password
```

You can refer to the section [Values](#values) for the full list of all the available configuration settings.

## Expose the services to the Internet

To expose the Platform services to the Internet, you need to specify the Ingress configuration in the
`values.yaml` file. You can expose the following services:

* `frontend`: the Platform frontend application
* `backend`: the Platform backend APIs used by the frontend
* `eventIngestion`: the Platform event ingestion APIs, used for receiving events and interactions.

Below you can find an example configuration for exposing all the services using
[ingress-nginx](https://github.com/kubernetes/ingress-nginx) as ingress
controller and [cert-manager](https://github.com/cert-manager/cert-manager) for managing SSL certificates:

```yaml
backend:
  ingress:
    enabled: true
    className: nginx
    annotations:
        cert-manager.io/cluster-issuer: letsencrypt
    tls:
      - hosts:
          - backend.nebuly.com
        secretName: tls-secret-backend
    hosts:
      - host: dev.backend.nebuly.com
        paths:
          - path: /api
            pathType: Prefix

frontend:
  backendApiUrl: https://dev.backend.nebuly.com

  ingress:
    enabled: true
    className: nginx
    annotations:
        cert-manager.io/cluster-issuer: letsencrypt
    tls:
      - hosts:
          - platform.nebuly.com
        secretName: tls-secret-frontend
    hosts:
      - host: platform.nebuly.com
        paths:
          - path: /
            pathType: Prefix

eventIngestion:
  ingress:
    enabled: true
    className: nginx
    annotations:
        nginx.ingress.kubernetes.io/use-regex: "true"
        nginx.ingress.kubernetes.io/rewrite-target: $1
        cert-manager.io/cluster-issuer: letsencrypt
    tls:
      - hosts:
          - platform.nebuly.com
        secretName: tls-secret-frontend
    hosts:
      - host: backend.nebuly.com
        paths:
          - path: /event-ingestion(/|$)(.*)
            pathType: Prefix
```


## Uninstalling the Chart

To uninstall/delete the `my-release` deployment:

```bash
helm uninstall my-release
```

The command removes all the Kubernetes components associated with the chart and deletes the release.


{{ template "chart.valuesSection" . }}

{{ template "chart.maintainersSection" . }}

{{ template "chart.sourcesSection" . }}
